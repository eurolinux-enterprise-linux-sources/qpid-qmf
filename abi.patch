diff --git a/qpid/cpp/include/qpid/messaging/Session.h b/qpid/cpp/include/qpid/messaging/Session.h
index 428f8aa..4188be3 100644
--- a/qpid/cpp/include/qpid/messaging/Session.h
+++ b/qpid/cpp/include/qpid/messaging/Session.h
@@ -78,10 +78,6 @@ class QPID_MESSAGING_CLASS_EXTERN Session : public qpid::messaging::Handle<Sessi
      */
     QPID_MESSAGING_EXTERN void acknowledge(Message&, bool sync=false);
     /**
-     * Acknowledges all message up to the specified message.
-     */
-    QPID_MESSAGING_EXTERN void acknowledgeUpTo(Message&, bool sync=false);
-    /**
      * Rejects the specified message. The broker does not redeliver a
      * message that has been rejected. Once a message has been
      * acknowledged, it can no longer be rejected.
@@ -169,6 +165,11 @@ class QPID_MESSAGING_CLASS_EXTERN Session : public qpid::messaging::Handle<Sessi
     QPID_MESSAGING_EXTERN bool hasError();
     QPID_MESSAGING_EXTERN void checkError();
 
+    /**
+     * Acknowledges all message up to the specified message.
+     */
+    QPID_MESSAGING_EXTERN void acknowledgeUpTo(Message&, bool sync=false);
+
 #ifndef SWIG
   private:
   friend class qpid::messaging::PrivateImplRef<Session>;
diff --git a/qpid/cpp/include/qpid/types/Variant.h b/qpid/cpp/include/qpid/types/Variant.h
index 4459fc4..50e2730 100644
--- a/qpid/cpp/include/qpid/types/Variant.h
+++ b/qpid/cpp/include/qpid/types/Variant.h
@@ -120,6 +120,10 @@ class QPID_TYPES_CLASS_EXTERN Variant
      * value. Recognises integers, doubles and booleans.
      */
     QPID_TYPES_EXTERN Variant& parse(const std::string&);
+    /**
+     * fromString() is deprecated - use parse() instead.
+     */
+    QPID_TYPES_EXTERN Variant& fromString(const std::string& s);
 
     QPID_TYPES_EXTERN bool asBool() const;
     QPID_TYPES_EXTERN uint8_t asUint8() const;
diff --git a/qpid/cpp/src/qpid/types/Variant.cpp b/qpid/cpp/src/qpid/types/Variant.cpp
index 0b28234..df3e0ca 100644
--- a/qpid/cpp/src/qpid/types/Variant.cpp
+++ b/qpid/cpp/src/qpid/types/Variant.cpp
@@ -794,6 +794,10 @@ Variant& Variant::parse(const std::string& s)
     return *this;
 }
 
+Variant& Variant::fromString(const std::string& s)
+{
+    return parse(s);
+}
 
 VariantType Variant::getType() const { return impl ? impl->getType() : VAR_VOID; }
 bool Variant::isVoid() const { return getType() == VAR_VOID; }
